[gd_scene load_steps=6 format=2]

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
uniform sampler2D textura;
uniform float h = 0.3;

uniform sampler2D normalmap;
varying vec2 tex_position;
// Derivada: Restar a un pixel el de al lado

void vertex() {
	float h2 = texture(textura, vec2(UV.x+TIME*0.07, UV.y)).r;
	VERTEX += vec3(0, h*h2, 0);
}

void fragment() {
	ALBEDO = texture(textura, UV).rgb;
	
	NORMALMAP = texture(normalmap, tex_position).xyz;
}"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/h = 0.161
shader_param/textura = SubResource( 5 )

[sub_resource type="PlaneMesh" id=1]
material = SubResource( 3 )
subdivide_width = 32
subdivide_depth = 32

[node name="Spatial" type="Spatial"]

[node name="CSGMesh" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.318836 )
mesh = SubResource( 1 )

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0252205, 0.339813, 0.126899 )
light_energy = 2.321
omni_attenuation = 3.99999
